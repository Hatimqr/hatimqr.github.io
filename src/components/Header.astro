---
import Menu from "@icons/Menu.astro";
import { Image } from "astro:assets";
import type { HeaderProps } from "@types";

type Props = HeaderProps;

const { siteLogo, navLinks } = Astro.props;
---

<header
  class="sticky top-0 z-50 mx-auto flex max-w-5xl animate-slide-in justify-between bg-black px-5 py-6"
>
  <a href="/" aria-label="Home link">
    <Image
      class="rounded-full"
      src={siteLogo}
      width="45"
      height="45"
      alt="website logo"
    />
  </a>

  <button
    type="button"
    id="menu-button"
    class="px-1.5 text-neutral sm:hidden"
    aria-expanded="false"
    aria-controls="main-menu"
  >
    <Menu />
  </button>

  <nav
    class="absolute top-20 right-5 hidden rounded-xl border border-neutral/40 bg-black px-4 py-5 text-neutral sm:static sm:block sm:border-0 sm:bg-transparent sm:p-0"
    id="main-menu"
  >
    <ul class="gap-2 sm:flex">
      {
        navLinks.map((link) => (
          <li class="relative">
            <a
              class={`nav-item relative block p-2 text-sm font-medium transition-all duration-500 after:absolute after:bottom-0 after:left-2/4 after:h-1 after:w-1 after:-translate-x-2/4 after:rounded-full after:bg-primary after:opacity-0 after:content-[''] hover:text-white`}
              href={link.href}
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<script>
  // Toggle mobile menu
  const button = document.querySelector("#menu-button");
  const menu = document.querySelector("#main-menu");
  const navItems = document.querySelectorAll("#main-menu > ul > li > a");

  const toggleMenu = () => {
    menu?.classList.toggle("hidden");
    const isHidden = menu?.classList.contains("hidden");
    button?.setAttribute("aria-expanded", `${!isHidden}`);
  };

  button?.addEventListener("click", toggleMenu);
  navItems.forEach((item) => {
    item?.addEventListener("click", () => {
      // For mobile menu, just toggle
      if (window.innerWidth < 640) {
        toggleMenu();
        return;
      }

      // For desktop, update active state immediately
      navItems.forEach((i) =>
        i.classList.remove("text-white", "md:after:opacity-100"),
      );
      item.classList.add("text-white", "md:after:opacity-100");
    });
  });

  // Improved navigation highlighting based on scroll position
  const sections = Array.from(document.querySelectorAll("section[id]"));
  
  const updateActiveNavigation = () => {
    const scrollY = window.scrollY;
    const windowHeight = window.innerHeight;
    
    let currentSection = '';
    
    // Check which section is currently most visible
    sections.forEach((section) => {
      const rect = section.getBoundingClientRect();
      const sectionTop = scrollY + rect.top;
      const sectionHeight = rect.height;
      
      // Consider a section active if:
      // 1. The top of the section is within the top 40% of the viewport, OR
      // 2. The section takes up more than 30% of the viewport
      if (
        (rect.top <= windowHeight * 0.4 && rect.bottom > 0) ||
        (rect.top < windowHeight * 0.7 && rect.bottom > windowHeight * 0.3)
      ) {
        currentSection = section.id;
      }
    });
    
    // Update navigation items
    navItems.forEach((item) => {
      const href = item.getAttribute("href");
      if (href === `#${currentSection}`) {
        item.classList.add("text-white", "md:after:opacity-100");
      } else {
        item.classList.remove("text-white", "md:after:opacity-100");
      }
    });
  };

  // Use scroll event with throttling for better performance
  let ticking = false;
  const handleScroll = () => {
    if (!ticking) {
      requestAnimationFrame(() => {
        updateActiveNavigation();
        ticking = false;
      });
      ticking = true;
    }
  };

  // Initial call and event listeners
  updateActiveNavigation();
  window.addEventListener("scroll", handleScroll);
  window.addEventListener("resize", updateActiveNavigation);

  // Cleanup
  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      window.removeEventListener("scroll", handleScroll);
      window.removeEventListener("resize", updateActiveNavigation);
    } else {
      window.addEventListener("scroll", handleScroll);
      window.addEventListener("resize", updateActiveNavigation);
    }
  };
</script>

<style>
  header {
    animation-timeline: scroll();
    animation-range: 0 650px;
  }
</style>